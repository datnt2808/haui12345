--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 4/9/2023 4:07:04 PM
-- Server version: 8.0.30
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE webbanhang;

--
-- Drop procedure `Proc_GetListBranchByShopID`
--
DROP PROCEDURE IF EXISTS Proc_GetListBranchByShopID;

--
-- Drop procedure `Proc_GetListEmployeeByShopID`
--
DROP PROCEDURE IF EXISTS Proc_GetListEmployeeByShopID;

--
-- Drop procedure `Proc_CheckDuplicateEmployeeCode`
--
DROP PROCEDURE IF EXISTS Proc_CheckDuplicateEmployeeCode;

--
-- Drop procedure `Proc_GetEmployeeByEmail`
--
DROP PROCEDURE IF EXISTS Proc_GetEmployeeByEmail;

--
-- Drop procedure `Proc_GetEmployeeInfoByEmail`
--
DROP PROCEDURE IF EXISTS Proc_GetEmployeeInfoByEmail;

--
-- Drop table `shop`
--
DROP TABLE IF EXISTS shop;

--
-- Drop procedure `Proc_GetModulePermissionDefault`
--
DROP PROCEDURE IF EXISTS Proc_GetModulePermissionDefault;

--
-- Drop table `modulepermissiondefault`
--
DROP TABLE IF EXISTS modulepermissiondefault;

--
-- Drop table `rolemodule`
--
DROP TABLE IF EXISTS rolemodule;

--
-- Drop table `module`
--
DROP TABLE IF EXISTS module;

--
-- Drop procedure `Proc_GetBranchByUser`
--
DROP PROCEDURE IF EXISTS Proc_GetBranchByUser;

--
-- Drop procedure `Proc_GetListRoleModuleByUser`
--
DROP PROCEDURE IF EXISTS Proc_GetListRoleModuleByUser;

--
-- Drop procedure `Proc_RegisterManagement`
--
DROP PROCEDURE IF EXISTS Proc_RegisterManagement;

--
-- Drop table `employee`
--
DROP TABLE IF EXISTS employee;

--
-- Drop table `role`
--
DROP TABLE IF EXISTS role;

--
-- Drop table `productinventory`
--
DROP TABLE IF EXISTS productinventory;

--
-- Drop procedure `Proc_GetBranchByShopID`
--
DROP PROCEDURE IF EXISTS Proc_GetBranchByShopID;

--
-- Drop procedure `Proc_GetReportRevenueByBranchV2`
--
DROP PROCEDURE IF EXISTS Proc_GetReportRevenueByBranchV2;

--
-- Drop table `branch`
--
DROP TABLE IF EXISTS branch;

--
-- Drop table `cartproduct`
--
DROP TABLE IF EXISTS cartproduct;

--
-- Drop table `cart`
--
DROP TABLE IF EXISTS cart;

--
-- Drop procedure `Proc_GetReportProductBestSell`
--
DROP PROCEDURE IF EXISTS Proc_GetReportProductBestSell;

--
-- Drop table `orderdetail`
--
DROP TABLE IF EXISTS orderdetail;

--
-- Drop procedure `Proc_GetReportRevenueByYear`
--
DROP PROCEDURE IF EXISTS Proc_GetReportRevenueByYear;

--
-- Drop table `saleorder`
--
DROP TABLE IF EXISTS saleorder;

--
-- Drop table `customer`
--
DROP TABLE IF EXISTS customer;

--
-- Drop table `promotion`
--
DROP TABLE IF EXISTS promotion;

--
-- Drop table `productdetail`
--
DROP TABLE IF EXISTS productdetail;

--
-- Drop table `product`
--
DROP TABLE IF EXISTS product;

--
-- Drop table `productcategory`
--
DROP TABLE IF EXISTS productcategory;

--
-- Set default database
--
USE webbanhang;

--
-- Create table `productcategory`
--
CREATE TABLE productcategory (
  idproductcategory int NOT NULL AUTO_INCREMENT,
  productcategorycode varchar(45) NOT NULL,
  productcategoryname varchar(255) NOT NULL,
  description varchar(1000) DEFAULT NULL,
  parentid int DEFAULT NULL,
  parentname varchar(255) DEFAULT NULL,
  PRIMARY KEY (idproductcategory)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng nhóm hàng hóa';

--
-- Create table `product`
--
CREATE TABLE product (
  idproduct int NOT NULL AUTO_INCREMENT,
  productcode varchar(45) NOT NULL,
  productname varchar(45) NOT NULL,
  categoryid int DEFAULT NULL,
  categoryname varchar(255) DEFAULT NULL,
  costprice int DEFAULT NULL,
  sellprice int DEFAULT NULL,
  description text DEFAULT NULL,
  image text DEFAULT NULL,
  inventory int DEFAULT NULL,
  color text DEFAULT NULL,
  size text DEFAULT NULL,
  level1name text DEFAULT NULL,
  level2name text DEFAULT NULL,
  createddate datetime DEFAULT NULL,
  createdby varchar(255) DEFAULT NULL,
  modifieddate datetime DEFAULT NULL,
  modifiedby varchar(255) DEFAULT NULL,
  branchid int DEFAULT NULL,
  branchname varchar(255) DEFAULT NULL,
  PRIMARY KEY (idproduct),
  UNIQUE INDEX idproduct_UNIQUE (idproduct)
)
ENGINE = INNODB,
AUTO_INCREMENT = 339,
AVG_ROW_LENGTH = 540,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `fk_productcategory_idx` on table `product`
--
ALTER TABLE product
ADD INDEX fk_productcategory_idx (categoryid);

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT fk_productcategory FOREIGN KEY (categoryid)
REFERENCES productcategory (idproductcategory);

--
-- Create table `productdetail`
--
CREATE TABLE productdetail (
  idproductdetail int NOT NULL AUTO_INCREMENT,
  idproduct int DEFAULT NULL,
  costprice int DEFAULT NULL,
  sellprice int DEFAULT NULL,
  inventory int DEFAULT NULL,
  productname varchar(500) DEFAULT NULL,
  productcode varchar(500) DEFAULT NULL,
  size varchar(255) DEFAULT NULL,
  color varchar(255) DEFAULT NULL,
  PRIMARY KEY (idproductdetail)
)
ENGINE = INNODB,
AUTO_INCREMENT = 1027,
AVG_ROW_LENGTH = 163,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
COMMENT = 'bảng hàng hóa chi tiết';

--
-- Create foreign key
--
ALTER TABLE productdetail
ADD CONSTRAINT fk_product_master FOREIGN KEY (idproduct)
REFERENCES product (idproduct) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create table `promotion`
--
CREATE TABLE promotion (
  idpromotion int NOT NULL,
  promotioncode varchar(45) DEFAULT NULL,
  promotionname varchar(255) DEFAULT NULL,
  startdate date DEFAULT NULL,
  enddate date DEFAULT NULL,
  statusid int DEFAULT NULL,
  statusname varchar(45) DEFAULT NULL,
  PRIMARY KEY (idpromotion)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng khuyến mại';

--
-- Create table `customer`
--
CREATE TABLE customer (
  idcustomer int NOT NULL AUTO_INCREMENT,
  customername varchar(45) DEFAULT NULL,
  phonenumber varchar(45) DEFAULT NULL,
  email varchar(45) DEFAULT NULL,
  birthday varchar(45) DEFAULT NULL,
  address varchar(45) DEFAULT NULL,
  PRIMARY KEY (idcustomer)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `saleorder`
--
CREATE TABLE saleorder (
  idsaleorder int NOT NULL AUTO_INCREMENT,
  customerid int DEFAULT NULL,
  customername varchar(45) DEFAULT NULL,
  customerphone varchar(45) DEFAULT NULL,
  customeremail varchar(45) DEFAULT NULL,
  address varchar(255) DEFAULT NULL,
  receiveemployeeid int DEFAULT NULL,
  isonline bit(1) DEFAULT NULL,
  statusid int DEFAULT NULL,
  statusname varchar(45) DEFAULT NULL,
  receivedate date DEFAULT NULL,
  createddate date DEFAULT NULL,
  promotionid int DEFAULT NULL,
  promotionname varchar(255) DEFAULT NULL,
  branchid int DEFAULT NULL,
  branchname varchar(255) DEFAULT NULL,
  ordertypeid int DEFAULT NULL,
  ordertypename varchar(255) DEFAULT NULL,
  checkoutstatusid int DEFAULT NULL,
  checkoutstatusname varchar(255) DEFAULT NULL,
  checkouttypeid int DEFAULT NULL,
  checkouttypename varchar(255) DEFAULT NULL,
  customerdescription varchar(1000) DEFAULT NULL,
  provinceid int DEFAULT NULL,
  provincename varchar(255) DEFAULT NULL,
  districtid int DEFAULT NULL,
  districtname varchar(255) DEFAULT NULL,
  wardid int DEFAULT NULL,
  wardname varchar(255) DEFAULT NULL,
  customeraddress varchar(1000) DEFAULT NULL,
  deliverprice int DEFAULT NULL,
  totalprice int DEFAULT NULL,
  orderdate date DEFAULT NULL,
  receiveemployeename varchar(255) DEFAULT NULL,
  ordercode varchar(45) DEFAULT NULL,
  PRIMARY KEY (idsaleorder)
)
ENGINE = INNODB,
AUTO_INCREMENT = 76,
AVG_ROW_LENGTH = 910,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `fk_order_customer_idx` on table `saleorder`
--
ALTER TABLE saleorder
ADD INDEX fk_order_customer_idx (customerid);

--
-- Create index `fk_order_promotion_idx` on table `saleorder`
--
ALTER TABLE saleorder
ADD INDEX fk_order_promotion_idx (promotionid);

--
-- Create foreign key
--
ALTER TABLE saleorder
ADD CONSTRAINT fk_order_customer FOREIGN KEY (customerid)
REFERENCES customer (idcustomer);

--
-- Create foreign key
--
ALTER TABLE saleorder
ADD CONSTRAINT fk_order_promotion FOREIGN KEY (promotionid)
REFERENCES promotion (idpromotion) ON DELETE SET NULL ON UPDATE SET NULL;

DELIMITER $$

--
-- Create procedure `Proc_GetReportRevenueByYear`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetReportRevenueByYear (IN v_branchid int, IN v_year int)
BEGIN
  SELECT
    s.branchid,
    s.branchname,
    CASE WHEN s.deliverprice IS NULL THEN s.totalprice ELSE s.totalprice - s.deliverprice END AS totalprice,
    s.orderdate,
    s.idsaleorder
  FROM saleorder s
  WHERE (s.branchid = v_branchid
  OR v_branchid = 99999)
  AND YEAR(s.orderdate) = v_year
  AND s.statusid = 1;
END
$$

DELIMITER ;

--
-- Create table `orderdetail`
--
CREATE TABLE orderdetail (
  idorderdetail int NOT NULL AUTO_INCREMENT,
  idsaleorder int NOT NULL,
  idproductdetail int DEFAULT NULL,
  quantity int DEFAULT NULL,
  productcode varchar(255) DEFAULT NULL,
  productname varchar(255) DEFAULT NULL,
  size varchar(45) DEFAULT NULL,
  color varchar(45) DEFAULT NULL,
  sellprice int DEFAULT NULL,
  PRIMARY KEY (idorderdetail)
)
ENGINE = INNODB,
AUTO_INCREMENT = 85,
AVG_ROW_LENGTH = 630,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'bảng danh sách sản phẩm trong đơn hàng';

--
-- Create index `fk_idproductdetail_idx` on table `orderdetail`
--
ALTER TABLE orderdetail
ADD INDEX fk_idproductdetail_idx (idproductdetail);

--
-- Create index `fk-orderid_saleorder_idx` on table `orderdetail`
--
ALTER TABLE orderdetail
ADD INDEX `fk-orderid_saleorder_idx` (idsaleorder);

--
-- Create foreign key
--
ALTER TABLE orderdetail
ADD CONSTRAINT `fk-orderid_saleorder` FOREIGN KEY (idsaleorder)
REFERENCES saleorder (idsaleorder) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE orderdetail
ADD CONSTRAINT fk_idproductdetail FOREIGN KEY (idproductdetail)
REFERENCES productdetail (idproductdetail);

DELIMITER $$

--
-- Create procedure `Proc_GetReportProductBestSell`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetReportProductBestSell (IN v_startdate datetime, IN v_enddate datetime)
BEGIN
  SELECT
    ppd.productname,
    ppd.productcode,
    SUM(od.quantity) AS quantity
  FROM orderdetail od
    LEFT JOIN saleorder s
      ON od.idsaleorder = s.idsaleorder
    LEFT JOIN (SELECT
        pd.idproductdetail,
        p.productname,
        p.productcode
      FROM productdetail pd
        LEFT JOIN product p
          ON pd.idproduct = p.idproduct) ppd
      ON ppd.idproductdetail = od.idproductdetail
  WHERE DATE(s.orderdate) >= DATE(v_startdate)
  AND DATE(s.orderdate) <= DATE(v_enddate)
  GROUP BY ppd.productname,
           ppd.productcode;
END
$$

DELIMITER ;

--
-- Create table `cart`
--
CREATE TABLE cart (
  idcart int NOT NULL,
  customerid int DEFAULT NULL,
  createddate datetime DEFAULT NULL,
  modifieddate datetime DEFAULT NULL,
  PRIMARY KEY (idcart)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng đơn hàng';

--
-- Create index `fk_cart_customer_idx` on table `cart`
--
ALTER TABLE cart
ADD INDEX fk_cart_customer_idx (customerid);

--
-- Create foreign key
--
ALTER TABLE cart
ADD CONSTRAINT fk_cart_customer FOREIGN KEY (customerid)
REFERENCES customer (idcustomer) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create table `cartproduct`
--
CREATE TABLE cartproduct (
  idcartproduct int NOT NULL AUTO_INCREMENT,
  productid int NOT NULL,
  cartid int NOT NULL,
  quantity int DEFAULT NULL,
  PRIMARY KEY (idcartproduct)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Danh sách Product trong cart';

--
-- Create index `fk_cartproduct_cart_idx` on table `cartproduct`
--
ALTER TABLE cartproduct
ADD INDEX fk_cartproduct_cart_idx (cartid);

--
-- Create index `fk_cartproduct_product_v2_idx` on table `cartproduct`
--
ALTER TABLE cartproduct
ADD INDEX fk_cartproduct_product_v2_idx (productid);

--
-- Create foreign key
--
ALTER TABLE cartproduct
ADD CONSTRAINT fk_cartproduct_cart FOREIGN KEY (cartid)
REFERENCES cart (idcart);

--
-- Create foreign key
--
ALTER TABLE cartproduct
ADD CONSTRAINT fk_cartproduct_product_v2 FOREIGN KEY (productid)
REFERENCES productdetail (idproductdetail);

--
-- Create table `branch`
--
CREATE TABLE branch (
  idbranch int NOT NULL AUTO_INCREMENT,
  idshop int DEFAULT NULL,
  branchcode varchar(45) NOT NULL,
  branchname varchar(255) DEFAULT NULL,
  address varchar(1000) DEFAULT NULL,
  branchmanagerid int DEFAULT NULL,
  branchmanagername varchar(255) DEFAULT NULL,
  provinceid int DEFAULT NULL,
  provincename varchar(255) DEFAULT NULL,
  districtid int DEFAULT NULL,
  districtname varchar(255) DEFAULT NULL,
  wardid varchar(25) DEFAULT NULL,
  wardname varchar(255) DEFAULT NULL,
  isaddressdefault bit(1) DEFAULT NULL,
  PRIMARY KEY (idbranch),
  UNIQUE INDEX idbranch_UNIQUE (idbranch)
)
ENGINE = INNODB,
AUTO_INCREMENT = 23,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng chi nhánh';

--
-- Create index `branchcode_UNIQUE` on table `branch`
--
ALTER TABLE branch
ADD UNIQUE INDEX branchcode_UNIQUE (branchcode);

DELIMITER $$

--
-- Create procedure `Proc_GetReportRevenueByBranchV2`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetReportRevenueByBranchV2 (IN v_startdate datetime, IN v_enddate datetime)
BEGIN
  DROP TABLE IF EXISTS my_temp;
  CREATE TEMPORARY TABLE my_temp
  SELECT
    CASE WHEN s.deliverprice IS NULL THEN s.totalprice ELSE s.totalprice - s.deliverprice END AS totalprice,
    s.branchid,
    s.branchname
  FROM saleorder s
  WHERE DATE(s.orderdate) >= DATE(v_startdate)
  AND DATE(s.orderdate) <= DATE(v_enddate)
  AND s.statusid = 1;
  SELECT
    COALESCE(SUM(m.totalprice), 0)
  FROM branch b
    LEFT JOIN my_temp m
      ON b.idbranch = m.branchid
  GROUP BY b.idbranch
  ORDER BY b.idbranch DESC;
  DROP TABLE IF EXISTS my_temp;
END
$$

--
-- Create procedure `Proc_GetBranchByShopID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetBranchByShopID (IN v_idshop int)
BEGIN
  SELECT
    *
  FROM branch b
  WHERE b.idshop = v_idshop;
END
$$

DELIMITER ;

--
-- Create table `productinventory`
--
CREATE TABLE productinventory (
  idproductinventory int NOT NULL AUTO_INCREMENT,
  idproduct int DEFAULT NULL,
  quantity int DEFAULT NULL,
  idbranch int DEFAULT NULL,
  PRIMARY KEY (idproductinventory)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `fk_branch_idx` on table `productinventory`
--
ALTER TABLE productinventory
ADD INDEX fk_branch_idx (idbranch);

--
-- Create index `fk_product_idx` on table `productinventory`
--
ALTER TABLE productinventory
ADD INDEX fk_product_idx (idproduct);

--
-- Create foreign key
--
ALTER TABLE productinventory
ADD CONSTRAINT fk_branch FOREIGN KEY (idbranch)
REFERENCES branch (idbranch) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE productinventory
ADD CONSTRAINT fk_product FOREIGN KEY (idproduct)
REFERENCES product (idproduct) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create table `role`
--
CREATE TABLE role (
  idrole int NOT NULL AUTO_INCREMENT,
  rolecode varchar(255) NOT NULL,
  rolename varchar(255) NOT NULL,
  description text DEFAULT NULL,
  idshop int DEFAULT NULL,
  PRIMARY KEY (idrole)
)
ENGINE = INNODB,
AUTO_INCREMENT = 84,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `employee`
--
CREATE TABLE employee (
  idemployee int NOT NULL AUTO_INCREMENT,
  employeecode varchar(255) DEFAULT NULL,
  employeename varchar(255) DEFAULT NULL,
  email varchar(45) NOT NULL,
  password varchar(255) DEFAULT NULL,
  branchid int DEFAULT NULL,
  branchname varchar(255) DEFAULT NULL,
  statusid int DEFAULT NULL,
  statusname varchar(45) DEFAULT NULL,
  roleid int DEFAULT NULL,
  rolename varchar(500) DEFAULT NULL,
  isadmin bit(1) DEFAULT b'0',
  PRIMARY KEY (idemployee)
)
ENGINE = INNODB,
AUTO_INCREMENT = 48,
AVG_ROW_LENGTH = 481,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bang nhan vien';

--
-- Create index `email_UNIQUE` on table `employee`
--
ALTER TABLE employee
ADD UNIQUE INDEX email_UNIQUE (email);

--
-- Create index `fk_employee_branch_idx` on table `employee`
--
ALTER TABLE employee
ADD INDEX fk_employee_branch_idx (branchid);

--
-- Create index `fk_employee_roleid_idx` on table `employee`
--
ALTER TABLE employee
ADD INDEX fk_employee_roleid_idx (roleid);

--
-- Create foreign key
--
ALTER TABLE employee
ADD CONSTRAINT fk_employee_branch FOREIGN KEY (branchid)
REFERENCES branch (idbranch) ON DELETE SET NULL ON UPDATE SET NULL;

--
-- Create foreign key
--
ALTER TABLE employee
ADD CONSTRAINT fk_employee_role FOREIGN KEY (roleid)
REFERENCES role (idrole) ON DELETE SET NULL ON UPDATE SET NULL;

DELIMITER $$

--
-- Create procedure `Proc_RegisterManagement`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_RegisterManagement (IN v_email varchar(255), IN v_password varchar(255))
BEGIN
  SET @CountEmployee = (SELECT
      COUNT(e.idemployee)
    FROM employee e
    WHERE e.email = v_email LIMIT 1);
  IF @CountEmployee = 0 THEN
    INSERT INTO employee (email, password)
      VALUES (v_email, v_password);
    SELECT
      1;
  ELSE
    SELECT
      0;
  END IF;
END
$$

--
-- Create procedure `Proc_GetListRoleModuleByUser`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetListRoleModuleByUser (IN v_email varchar(255))
BEGIN
  -- Lấy vai trò của user
  SET @idrole = (SELECT
      e.roleid
    FROM employee e
    WHERE e.email = v_email LIMIT 1);
  SELECT
    rm.*,
    m.layoutname AS modulename,
    m.layoutcode AS modulecode,
    m.*
  FROM rolemodule rm
    LEFT JOIN module m
      ON rm.idmodule = m.idmodule
  WHERE rm.idrole = @idrole
  ORDER BY m.sortorder;
END
$$

--
-- Create procedure `Proc_GetBranchByUser`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetBranchByUser (IN email varchar(255))
BEGIN
  SET @branchid = (SELECT
      e.isadmin
    FROM employee e
    WHERE e.email = email LIMIT 1);
  IF @branchid <> 1 THEN
    SELECT
      *
    FROM branch
    WHERE idbranch = (SELECT
        e.branchid
      FROM employee e
      WHERE e.email = email);
  ELSE
    SELECT
      *
    FROM branch
    WHERE idshop = (SELECT
        b.idshop
      FROM employee e
        INNER JOIN branch b
          ON e.branchid = b.idbranch
      WHERE e.email = email);
  END IF;
END
$$

DELIMITER ;

--
-- Create table `module`
--
CREATE TABLE module (
  idmodule int NOT NULL AUTO_INCREMENT,
  layoutcode varchar(255) NOT NULL,
  layoutname varchar(255) NOT NULL,
  parentid int DEFAULT NULL,
  isparent int DEFAULT NULL,
  icon varchar(255) DEFAULT NULL,
  routename varchar(255) DEFAULT NULL,
  sortorder int DEFAULT NULL,
  PRIMARY KEY (idmodule)
)
ENGINE = INNODB,
AUTO_INCREMENT = 19,
AVG_ROW_LENGTH = 1260,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `layoutcode_UNIQUE` on table `module`
--
ALTER TABLE module
ADD UNIQUE INDEX layoutcode_UNIQUE (layoutcode);

--
-- Create table `rolemodule`
--
CREATE TABLE rolemodule (
  idrolemodule int NOT NULL AUTO_INCREMENT,
  idrole int DEFAULT NULL,
  idmodule int DEFAULT NULL,
  permission varchar(1000) DEFAULT NULL,
  PRIMARY KEY (idrolemodule)
)
ENGINE = INNODB,
AUTO_INCREMENT = 116,
AVG_ROW_LENGTH = 455,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `module_fk_idx` on table `rolemodule`
--
ALTER TABLE rolemodule
ADD INDEX module_fk_idx (idmodule);

--
-- Create index `role_fk_idx` on table `rolemodule`
--
ALTER TABLE rolemodule
ADD INDEX role_fk_idx (idrole);

--
-- Create foreign key
--
ALTER TABLE rolemodule
ADD CONSTRAINT module_fk FOREIGN KEY (idmodule)
REFERENCES module (idmodule) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE rolemodule
ADD CONSTRAINT role_fk FOREIGN KEY (idrole)
REFERENCES role (idrole) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create table `modulepermissiondefault`
--
CREATE TABLE modulepermissiondefault (
  idmodulepermissiondefault int NOT NULL AUTO_INCREMENT,
  idmodule int NOT NULL,
  permission text DEFAULT NULL,
  PRIMARY KEY (idmodulepermissiondefault)
)
ENGINE = INNODB,
AUTO_INCREMENT = 18,
AVG_ROW_LENGTH = 1638,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'Bảng các quyền mặc định mang đi của module';

--
-- Create index `fk_module_idx` on table `modulepermissiondefault`
--
ALTER TABLE modulepermissiondefault
ADD INDEX fk_module_idx (idmodule);

--
-- Create foreign key
--
ALTER TABLE modulepermissiondefault
ADD CONSTRAINT fk_module FOREIGN KEY (idmodule)
REFERENCES module (idmodule) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_GetModulePermissionDefault`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetModulePermissionDefault ()
BEGIN
  SELECT
    mpd.*,
    m.layoutname
  FROM modulepermissiondefault mpd
    LEFT JOIN module m
      ON mpd.idmodule = m.idmodule;
END
$$

DELIMITER ;

--
-- Create table `shop`
--
CREATE TABLE shop (
  idshop int NOT NULL AUTO_INCREMENT COMMENT 'id shop',
  shopname varchar(255) DEFAULT NULL COMMENT 'tên shop',
  logo text DEFAULT NULL,
  shopinactive bit(1) DEFAULT b'1',
  PRIMARY KEY (idshop)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'thông tin shop';

DELIMITER $$

--
-- Create procedure `Proc_GetEmployeeInfoByEmail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetEmployeeInfoByEmail (IN v_email text)
BEGIN
  SELECT
    e.*,
    s.idshop,
    s.shopname,
    s.logo,
    s.shopinactive
  FROM employee e
    INNER JOIN branch b
      ON e.branchid = b.idbranch
    INNER JOIN shop s
      ON b.idshop = s.idshop
  WHERE e.email = v_email LIMIT 1;
END
$$

--
-- Create procedure `Proc_GetEmployeeByEmail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetEmployeeByEmail (IN v_email varchar(255))
BEGIN
  SELECT
    e.idemployee,
    e.email,
    e.employeecode,
    e.employeename,
    e.password,
    s.idshop,
    s.shopname,
    s.logo,
    s.shopinactive
  FROM employee e
    INNER JOIN branch b
      ON e.branchid = b.idbranch
    INNER JOIN shop s
      ON b.idshop = s.idshop
  WHERE e.email = v_email;
END
$$

--
-- Create procedure `Proc_CheckDuplicateEmployeeCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CheckDuplicateEmployeeCode (IN v_employeeCode varchar(255), IN v_brandID varchar(255))
BEGIN
  SET @shopID = (SELECT
      s.idshop
    FROM branch b
      INNER JOIN shop s
        ON b.idshop = s.idshop
    WHERE b.idbranch = v_brandID LIMIT 1);

  IF @shopID IS NOT NULL THEN
    SELECT
      e.*
    FROM employee e
      INNER JOIN branch b
        ON e.branchid = b.idbranch
      INNER JOIN shop s
        ON b.idshop = s.idshop
    WHERE e.employeecode = v_employeeCode
    AND s.idshop = @shopID;
  ELSE
    SELECT
      NULL;
  END IF;
END
$$

--
-- Create procedure `Proc_GetListEmployeeByShopID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetListEmployeeByShopID (IN v_Where text, IN v_OrderBy text)
BEGIN
  SET @data = '
    SELECT * FROM (
      SELECT e.*,
            s.idshop,
            s.shopname,
            s.shopinactive 
      FROM employee e
      INNER JOIN branch b ON e.branchid = b.idbranch
      INNER JOIN shop s ON b.idshop = s.idshop
      ORDER BY e.idemployee DESC
    ) T 
     
  ';
  SET @data1 = '
    SELECT COUNT(1) FROM (
      SELECT e.*,
            s.idshop,
            s.shopname,
            s.shopinactive 
      FROM employee e
      INNER JOIN branch b ON e.branchid = b.idbranch
      INNER JOIN shop s ON b.idshop = s.idshop
    ) T 
     
  ';
  SET @sql = CONCAT(@data, v_Where, ' ', v_OrderBy);
  PREPARE query FROM @sql;
  EXECUTE query;

  SET @sql = CONCAT(@data1, v_Where);
  PREPARE query FROM @sql;
  EXECUTE query;
END
$$

--
-- Create procedure `Proc_GetListBranchByShopID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GetListBranchByShopID (IN v_Where text, IN v_OrderBy text)
BEGIN
  SET @sql = CONCAT('SELECT * FROM branch T ', v_Where, ' ', v_OrderBy);
  PREPARE query FROM @sql;
  EXECUTE query;

  SET @sql = CONCAT('SELECT COUNT(1) FROM branch T ', v_Where);
  PREPARE query FROM @sql;
  EXECUTE query;
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;